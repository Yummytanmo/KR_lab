/home/shchen/soft/miniconda3/lib/python3.11/site-packages/torch/nn/modules/rnn.py:123: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.1 and num_layers=1
  warnings.warn(
/home/shchen/soft/miniconda3/lib/python3.11/site-packages/transformers/optimization.py:640: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(
/home/shchen/code/study/wwx/KR_lab/lab4/main.py:73: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.model.load_state_dict(torch.load(os.path.join(self.output_dir, "pytorch_model_ner.bin")))
  0%|          | 0/32 [00:00<?, ?it/s]  3%|▎         | 1/32 [00:01<00:33,  1.07s/it]  6%|▋         | 2/32 [00:01<00:22,  1.35it/s]  9%|▉         | 3/32 [00:02<00:18,  1.61it/s] 12%|█▎        | 4/32 [00:02<00:15,  1.77it/s] 16%|█▌        | 5/32 [00:03<00:14,  1.87it/s] 19%|█▉        | 6/32 [00:03<00:13,  1.95it/s] 22%|██▏       | 7/32 [00:03<00:12,  1.99it/s] 25%|██▌       | 8/32 [00:04<00:11,  2.03it/s] 28%|██▊       | 9/32 [00:04<00:11,  2.05it/s] 31%|███▏      | 10/32 [00:05<00:10,  2.07it/s] 34%|███▍      | 11/32 [00:05<00:10,  2.07it/s] 38%|███▊      | 12/32 [00:06<00:09,  2.08it/s] 41%|████      | 13/32 [00:06<00:09,  2.09it/s] 44%|████▍     | 14/32 [00:07<00:08,  2.09it/s] 47%|████▋     | 15/32 [00:07<00:08,  2.08it/s] 50%|█████     | 16/32 [00:08<00:07,  2.08it/s] 53%|█████▎    | 17/32 [00:08<00:07,  2.08it/s] 56%|█████▋    | 18/32 [00:09<00:07,  1.81it/s] 59%|█████▉    | 19/32 [00:09<00:06,  1.88it/s] 62%|██████▎   | 20/32 [00:10<00:06,  1.94it/s] 66%|██████▌   | 21/32 [00:10<00:05,  1.98it/s] 69%|██████▉   | 22/32 [00:11<00:04,  2.02it/s] 72%|███████▏  | 23/32 [00:11<00:04,  2.04it/s] 75%|███████▌  | 24/32 [00:12<00:03,  2.06it/s] 78%|███████▊  | 25/32 [00:12<00:03,  2.07it/s] 81%|████████▏ | 26/32 [00:13<00:02,  2.08it/s] 84%|████████▍ | 27/32 [00:13<00:02,  2.08it/s] 88%|████████▊ | 28/32 [00:14<00:01,  2.08it/s] 91%|█████████ | 29/32 [00:14<00:01,  2.08it/s] 94%|█████████▍| 30/32 [00:15<00:00,  2.08it/s] 97%|█████████▋| 31/32 [00:15<00:00,  2.08it/s]100%|██████████| 32/32 [00:15<00:00,  2.39it/s]100%|██████████| 32/32 [00:16<00:00,  2.00it/s]
/home/shchen/soft/miniconda3/lib/python3.11/site-packages/seqeval/metrics/v1.py:57: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
